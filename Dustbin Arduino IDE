#include <SoftwareSerial.h>
#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define trigpin1 12
#define echopin1 13
#define trigpin2 4
#define echopin2 11
#define led1 5
#define led2 6
#define led3 7
#define led4 8
#define emergencyButton A0  // Use analog pin A0 as the button input

SoftwareSerial Gsm(2, 3);
Servo Servo1;
LiquidCrystal_I2C lcd(0x27, 16, 2);

const unsigned long eventTime_1 = 1000;
const unsigned long eventTime_2 = 5000;

unsigned long previousTime_1 = 0;
unsigned long previousTime_2 = 0;

bool isBinFull = false;
bool flag = false;
bool flag1 = false;
long Distance1, Duration1;
long Distance2, Duration2;

// Function prototypes
void openLid();
void send_msg();

void setup() {
  Serial.begin(9600);
  Gsm.begin(9600);

  lcd.init();
  lcd.backlight();

  Servo1.attach(9);
  delay(1000);
  Servo1.write(0);
  delay(1000);
  Servo1.detach();

  pinMode(trigpin1, OUTPUT);
  pinMode(echopin1, INPUT);
  pinMode(trigpin2, OUTPUT);
  pinMode(echopin2, INPUT);

  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);
  pinMode(emergencyButton, INPUT_PULLUP);  // Configure A0 as input with pull-up

  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(led3, LOW);
  digitalWrite(led4, LOW);

  delay(3000);
  Serial.println("SMART DUSTBIN IS Ready TO WORK");
  lcd.setCursor(0, 0);
  lcd.print("SMART DUSTBIN");
  lcd.setCursor(0, 1);
  lcd.print("Ready to work");

  Servo1.attach(9);
}

void loop() {
  unsigned long currentTime = millis();

  // Emergency button check
  if (digitalRead(emergencyButton) == LOW) {  // Button pressed (active LOW)
    Serial.println("Emergency button pressed - Opening lid");
    lcd.setCursor(0, 1);
    lcd.print("CLEANING PROCESS");
    openLid();  // Call the function to open the lid
  }

  // Lid sensor logic
  if (currentTime - previousTime_1 >= eventTime_1) {
    Serial.println("Checking Lid Sensor");

    if (!isBinFull) {
      digitalWrite(trigpin2, LOW);
      delayMicroseconds(2);
      digitalWrite(trigpin2, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigpin2, LOW);
      Duration2 = pulseIn(echopin2, HIGH);
      Distance2 = (Duration2 / 2) / 29.1;

      if (Distance2 > 0 && Distance2 <= 8) {
        Servo1.attach(9);
        Serial.println("OPEN LID");
        lcd.setCursor(0, 1);
        lcd.print("Lid: OPEN        ");
        Servo1.write(185);
        delay(5000);  // Keep lid open for 2 seconds
        Servo1.write(0);  // Close the lid after 2 seconds
        flag1 = true;
      } else {
        Serial.println("CLOSE LID");
        lcd.setCursor(0, 1);
        lcd.print("Lid: CLOSED      ");
        if (!flag1) {
          Servo1.detach();
          delay(15);
        } else {
          Servo1.write(0);
          delay(15);
          flag1 = false;
        }
      }
    } else {
      Serial.println("Bin is full - lid will not open.");
      lcd.setCursor(0, 1);
      lcd.print("SORRY Bin Full");
    }
    previousTime_1 = currentTime;
  }

  // Bin level sensor logic
  if (currentTime - previousTime_2 >= eventTime_2) {
    Serial.println("Checking Bin Level");
    digitalWrite(trigpin1, LOW);
    delayMicroseconds(2);
    digitalWrite(trigpin1, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigpin1, LOW);
    Duration1 = pulseIn(echopin1, HIGH);
    Distance1 = (Duration1 / 2) / 29.1;
    Serial.print("Distance:");
    Serial.println(Distance1);

    lcd.setCursor(0, 0);
    if (Distance1 >= 9 && Distance1 <= 11) {
      Serial.println("Level: 1");
      lcd.print("Level-20% FULL      ");
      digitalWrite(led1, HIGH);
      digitalWrite(led2, LOW);
      digitalWrite(led3, LOW);
      digitalWrite(led4, LOW);
      isBinFull = false;
      flag = false;
    } else if (Distance1 >= 6 && Distance1 <= 8) {
      Serial.println("Level: 2");
      lcd.print("Level-40% FULL        ");
      digitalWrite(led1, HIGH);
      digitalWrite(led2, HIGH);
      digitalWrite(led3, LOW);
      digitalWrite(led4, LOW);
      isBinFull = false;
    } else if (Distance1 >= 4 && Distance1 <= 5) {
      Serial.println("Level: 3");
      lcd.print("Level-60% FULL          ");
      digitalWrite(led1, HIGH);
      digitalWrite(led2, HIGH);
      digitalWrite(led3, HIGH);
      digitalWrite(led4, LOW);
      isBinFull = false;
    } else if (Distance1 >= 0 && Distance1 <= 3) {
      Serial.println("Level: 4 - FULL     ");
      lcd.print("Level-100% -FULL ");
      digitalWrite(led1, HIGH);
      digitalWrite(led2, HIGH);
      digitalWrite(led3, HIGH);
      digitalWrite(led4, HIGH);
      if (!flag) {
        send_msg();
        flag = true;
      }
      isBinFull = true;
    } else {
      digitalWrite(led1, LOW);
      digitalWrite(led2, LOW);
      digitalWrite(led3, LOW);
      digitalWrite(led4, LOW);
      isBinFull = false;
      lcd.print("DO U HAVE TRASH?");
    }
    previousTime_2 = currentTime;
  }
}

//Code logic for maintaining the lid
void openLid() {
  Servo1.attach(9);
  Servo1.write(185);  // Open the lid
  delay(7000);  // Keep it open for 2 seconds
  Servo1.write(0);  // Close the lid
  delay(500);
  Servo1.detach();
}

void send_msg() {
  Servo1.detach();
  delay(100);
  Gsm.println("AT+CMGF=1");
  delay(1000);
  Gsm.println("AT+CMGS=\"+918918952076\"\r");
  delay(1000);
  Gsm.println("DUSTBIN no. 1 IS FULL");
  delay(100);
  Gsm.println((char)26);
  delay(1000);
  Servo1.attach(9);
}
